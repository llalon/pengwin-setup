#!/bin/bash

SetupDir="./pengwin-setup.d"

export VERSION="1.2a"

# shellcheck disable=SC1090
source ${SetupDir}/common.sh "$@"

declare CANCELLED
declare SKIP_UPDATES
declare JUST_UPDATE

rm -f "${HOME}"/.should-restart

# define functions

function check_upgrades() {
    echo "Updating package database"
    
    # shellcheck disable=SC2155
    update_packages --allow-releaseinfo-change
    
    # Check for .dist-upgrade file in /etc/apt and inform user dist-upgrade available if so
    if [[ -f "/etc/apt/.dist-upgrade" ]]; then
        echo "Distribution upgrade flag noticed! Alerting user"
        if (confirm --title "Upgrade Available" --yesno "A distribution upgrade is available. In addition to regular package upgrades, this may also install / remove packages. Would you like to continue?\n\nTo run a non-automated distribution upgrade and see package changes, or to perform this in your own time, run 'sudo apt-get dist-upgrade'" 12 90); then
            sudo rm /etc/apt/.dist-upgrade
            sudo apt-get dist-upgrade -y
        fi
    fi
}

function WelcomePrompt() {
    message --title "Welcome to Pengwin" --msgbox "Thank you for supporting sustainable independent open source development.\n
Pengwin comes with a core set of useful packages pre-installed, such as curl, git, and wslu.\n
pengwin-setup allows you to install additional hand-curated selections for Pengwin and configure optional WSL-specific settings. \n
    Many more packages are available via the apt package manager and optional pip, npm, and RubyGems package managers." 17 80
}

function continue_prompt() {
    if (confirm --title "Continue setup?" --yesno "Would you like to continue pengwin-setup?" 8 45); then
        echo "Starting pengwin-setup."
    else
        echo "Exiting pengwin-setup."
        echo "You may run the script again any time by running: $ pengwin-setup"
        exit 0
    fi
}

function ByeMessage() {
    if [[ -f "${HOME}"/.should-restart ]]; then
        local should_restart=0
        rm -f "${HOME}"/.should-restart
    fi
    
    if [[ ${should_restart} ]]; then
        message --title "Setup is complete." --msgbox "Please close this window and start Pengwin again to apply the changes in the environment.\n\nYou may rerun pengwin-setup any time by typing: $ pengwin-setup\n\nYou may open a browser link to get help any time by typing: $ pengwin-help" 14 80
    else
        message --title "Setup is complete." --msgbox "You may rerun pengwin-setup any time by typing: $ pengwin-setup\n\nYou may open a browser link to get help any time by typing: $ pengwin-help" 10 80
    fi
}

# main menu
function install_menu() {
    # shellcheck disable=SC2155
    local menu_choice=$(
        
        menu --title "pengwin-setup" --checklist --separate-output "\nHand-curated add-ons [SPACE to select, ENTER to confirm]:" 16 99 8 \
        "EDITORS" "Install text editors neovim, emacs, or Visual Studio Code (requires X)    " off \
        "GUI" "Install an X server or various other GUI applications" off \
        "MAINTENANCE" "Various maintenance tasks like home backup" off \
        "PROGRAMMING" "Install various programming languages support" off \
        "SERVICES" "Enable services support (SSH, rc.local)" off \
        "SETTINGS" "Change various settings in Pengwin" off \
        "TOOLS" "Install applications or servers" off \
        "UNINSTALL" "Uninstall applications and packages installed by pengwin-setup" off
        
        # shellcheck disable=SC2188
        3>&1 1>&2 2>&3
    )
    
    echo "Selected:" "${menu_choice}"
    
    if [[ ${menu_choice} == "${CANCELLED}" ]]; then
        return
    fi
    
    local exit_status
    
    if [[ ${menu_choice} == *"EDITORS"* ]]; then
        echo "EDITORS"
        bash ${SetupDir}/editors.sh "$@"
        exit_status=$?
    fi
    
    if [[ ${menu_choice} == *"GUI"* ]]; then
        echo "GUI"
        bash ${SetupDir}/gui.sh "$@"
        exit_status=$?
    fi
    
    if [[ ${menu_choice} == *"MAINTENANCE"* ]]; then
        echo "MAINTENANCE"
        bash ${SetupDir}/maintenance.sh "$@"
        exit_status=$?
    fi
    
    if [[ ${menu_choice} == *"PROGRAMMING"* ]]; then
        echo "PROGRAMMING"
        bash ${SetupDir}/programming.sh "$@"
        exit_status=$?
    fi
    
    if [[ ${menu_choice} == *"SERVICES"* ]]; then
        echo "SERVICES"
        bash ${SetupDir}/services.sh "$@"
        exit_status=$?
    fi
    
    if [[ ${menu_choice} == *"SETTINGS"* ]]; then
        echo "SETTINGS"
        bash ${SetupDir}/settings.sh "$@"
        exit_status=$?
    fi
    
    if [[ ${menu_choice} == *"TOOLS"* ]]; then
        echo "TOOLS"
        bash ${SetupDir}/tools.sh "$@"
        exit_status=$?
    fi
    
    if [[ ${menu_choice} == *"UNINSTALL"* ]]; then
        echo "UNINSTALL"
        bash ${SetupDir}/uninstall.sh "$@"
        exit_status=$?
    fi
    
    if [[ ${exit_status} != 0 ]]; then
        install_menu "$@"
    fi
}

### Main
if [[ ${JUST_UPDATE} ]]; then
    check_upgrades
    exit 0
fi

WelcomePrompt
continue_prompt

if [[ ! ${SKIP_UPDATES} ]]; then
    check_upgrades
fi

# install menu
install_menu "$@"

ByeMessage
exit 0
